---
# 测试单个代理的网站连通性

- name: 初始化代理测试结果
  set_fact:
    proxy_name: "{{ proxy_item.inventory_hostname }}"
    proxy_tests: []
    successful_count: 0
    failed_count: 0

- name: 测试代理对各网站的连通性
  shell: |
    {% if proxy_item.proxy_username != '' and proxy_item.proxy_password != '' %}
    # 使用带认证的代理
    curl -x "{{ proxy_item.proxy_url | regex_replace('^http://', 'http://' + proxy_item.proxy_username + ':' + proxy_item.proxy_password + '@') }}" \
         -I -s -k \
         --connect-timeout {{ connection_timeout }} \
         --max-time {{ website_item.request_timeout | default(default_timeout) }} \
         -A "{{ http_config.user_agent }}" \
         -w "CURL_EXIT_CODE:%{exitcode},HTTP_CODE:%{http_code},TIME_TOTAL:%{time_total}" \
         "{{ website_item.test_url }}" 2>/dev/null || echo "CURL_FAILED"
    {% else %}
    # 使用无认证的代理
    curl -x "{{ proxy_item.proxy_url }}" \
         -I -s -k \
         --connect-timeout {{ connection_timeout }} \
         --max-time {{ website_item.request_timeout | default(default_timeout) }} \
         -A "{{ http_config.user_agent }}" \
         -w "CURL_EXIT_CODE:%{exitcode},HTTP_CODE:%{http_code},TIME_TOTAL:%{time_total}" \
         "{{ website_item.test_url }}" 2>/dev/null || echo "CURL_FAILED"
    {% endif %}
  register: website_test_result
  failed_when: false
  loop: "{{ test_websites }}"
  loop_control:
    loop_var: website_item
    label: "{{ website_item.inventory_hostname }}"

- name: 处理每个网站的测试结果
  set_fact:
    proxy_tests: "{{ proxy_tests + [test_result] }}"
    successful_count: "{{ successful_count | int + (1 if test_result.status == 'SUCCESS' else 0) }}"
    failed_count: "{{ failed_count | int + (1 if test_result.status == 'FAILED' else 0) }}"
  vars:
    curl_output: "{{ website_test_result.results[item_index].stdout if website_test_result.results is defined and website_test_result.results[item_index].stdout is defined else '' }}"
    curl_exit_match: "{{ curl_output | regex_search('CURL_EXIT_CODE:(\\d+)', '\\1') }}"
    curl_http_match: "{{ curl_output | regex_search('HTTP_CODE:(\\d+)', '\\1') }}"
    curl_time_match: "{{ curl_output | regex_search('TIME_TOTAL:([0-9.]+)', '\\1') }}"
    curl_exit_code: "{{ curl_exit_match[0] if curl_exit_match else '1' }}"
    curl_http_code: "{{ curl_http_match[0] if curl_http_match else '0' }}"
    curl_time_total: "{{ curl_time_match[0] if curl_time_match else '0' }}"
    curl_return_code: "{{ website_test_result.results[item_index].rc if website_test_result.results is defined and website_test_result.results[item_index].rc is defined else 1 }}"
    curl_stderr: "{{ website_test_result.results[item_index].stderr if website_test_result.results is defined and website_test_result.results[item_index].stderr is defined else '' }}"
    is_curl_failed: "{{ 'CURL_FAILED' in curl_output }}"
    final_status: "{{ 'SUCCESS' if (not is_curl_failed and curl_return_code == 0 and curl_exit_code|int == 0 and curl_http_code|int >= 200 and curl_http_code|int < 400) else 'FAILED' }}"
    test_result:
      website: "{{ website_test_result.results[item_index].website_item.inventory_hostname if website_test_result.results is defined else test_websites[item_index].inventory_hostname }}"
      url: "{{ website_test_result.results[item_index].website_item.test_url if website_test_result.results is defined else test_websites[item_index].test_url }}"
      status: "{{ final_status }}"
      status_code: "{{ curl_http_code | int if curl_http_code != '0' else -1 }}"
      response_time: "{{ (curl_time_total | float * 1000) | round(2) if curl_time_total != '0' else -1 }}"
      error_msg: "{{ curl_stderr if curl_return_code != 0 else ('CURL失败' if is_curl_failed else ('HTTP状态: ' + curl_http_code if curl_http_code | int < 200 or curl_http_code | int >= 400 else '')) }}"
      timestamp: "{{ current_timestamp }}"
      debug_info: "{{ {'curl_output': curl_output, 'curl_exit_code': curl_exit_code, 'curl_http_code': curl_http_code, 'curl_return_code': curl_return_code} if debug_mode | default(false) else omit }}"
  loop: "{{ range(0, test_websites | length) | list }}"
  loop_control:
    loop_var: item_index

- name: 处理检查模式的测试结果
  set_fact:
    proxy_tests: "{{ proxy_tests + [test_result] }}"
    failed_count: "{{ failed_count | int + 1 }}"
  vars:
    test_result:
      website: "{{ test_websites[item_index].inventory_hostname }}"
      url: "{{ test_websites[item_index].test_url }}"
      status: "SKIPPED"
      status_code: -1
      response_time: -1
      error_msg: "检查模式 - 测试未执行"
      timestamp: "{{ current_timestamp }}"
  loop: "{{ range(0, test_websites | length) | list }}"
  loop_control:
    loop_var: item_index
  when: ansible_check_mode and website_test_result.results is not defined

- name: 存储代理测试结果
  set_fact:
    proxy_test_results: "{{ proxy_test_results | combine({proxy_name: {
      'proxy_name': proxy_name,
      'proxy_url': proxy_item.proxy_url,
      'status': ('HEALTHY' if (successful_count | int * 100 / (successful_count | int + failed_count | int)) >= monitoring.thresholds.min_success_rate else 'UNHEALTHY'),
      'success_rate': ((successful_count | int * 100 / (successful_count | int + failed_count | int)) | round(2) if (successful_count | int + failed_count | int) > 0 else 0),
      'successful_tests': successful_count,
      'failed_tests': failed_count,
      'total_tests': (successful_count | int + failed_count | int),
      'test_details': proxy_tests,
      'timestamp': current_timestamp
    }}) }}"